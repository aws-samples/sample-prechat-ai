AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Deployment stage

Globals:
  Function:
    Runtime: python3.13
    Timeout: 30
    Environment:
      Variables:
        SESSIONS_TABLE: !Ref SessionsTable
        MESSAGES_TABLE: !Ref MessagesTable
        BEDROCK_REGION: ap-northeast-2
        USER_POOL_ID: !Ref AdminUserPool
        CLIENT_ID: !Ref AdminUserPoolClient
        ALLOWED_EMAIL_DOMAINS: amazon.com,nongshim.co.kr
  Api:
    EndpointConfiguration: REGIONAL

Resources:
  # Bedrock Agent Service Role
  BedrockAgentServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AmazonBedrockExecutionRoleForAgents_bedrock-agent-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
      Policies:
        - PolicyName: BedrockAgentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:Converse
                Resource: '*'

  AdminUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: mte-admin-users
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      EmailVerificationMessage: "[AWS PreChat] This is your sign-in code: \"{####}\""
      EmailVerificationSubject: "[AWS PreChat] Your sign-in code"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: phone_number
          AttributeDataType: String
          Required: true
          Mutable: true

  AdminUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref AdminUserPool
      ClientName: mte-admin-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      AccessTokenValidity: 24
      IdTokenValidity: 24
      RefreshTokenValidity: 30

  # DynamoDB Tables
  SessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: mte-sessions
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: mte-messages
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt AdminUserPool.Arn

  # Lambda Functions
  ChatFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: chat_handler.handle_message
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MessagesTable
        - Statement:
            Effect: Allow
            Action:
              - bedrock:InvokeAgent
            Resource: '*'
      Events:
        PostMessage:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/chat/message
            Method: post


  CreateSessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: session_handler.create_session
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
      Events:
        CreateSession:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/admin/sessions
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer


  GetSessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: session_handler.get_session
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MessagesTable
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:ListUsers
            Resource: !GetAtt AdminUserPool.Arn
      Events:
        GetSession:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/chat/session/{sessionId}
            Method: get


  VerifySessionPinFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: session_handler.verify_session_pin
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
      Events:
        VerifySessionPin:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/chat/session/{sessionId}/verify-pin
            Method: post


  ListSessionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: admin_handler.list_sessions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
      Events:
        ListSessions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/admin/sessions
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetSessionDetailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: admin_handler.get_session_details
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
      Events:
        GetSessionDetails:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/admin/sessions/{sessionId}/details
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  GetReportFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: admin_handler.get_session_report
      Timeout: 300
      MemorySize: 1024
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MessagesTable
        - Statement:
            Effect: Allow
            Action:
              - bedrock:InvokeAgent
              - bedrock:InvokeModel
            Resource: '*'
      Events:
        GetReport:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/admin/sessions/{sessionId}/report
            Method: get
            TimeoutInMillis: 29000
            Auth:
              Authorizer: CognitoAuthorizer

  InactivateSessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: admin_handler.inactivate_session
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
      Events:
        InactivateSession:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/admin/sessions/{sessionId}/inactivate
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteSessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: admin_handler.delete_session
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MessagesTable
      Events:
        DeleteSession:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/admin/sessions/{sessionId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  SignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: auth_handler.signup
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:SignUp
            Resource: !GetAtt AdminUserPool.Arn
      Events:
        Signup:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/auth/signup
            Method: post

  SigninFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: auth_handler.signin
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:AdminInitiateAuth
            Resource: !GetAtt AdminUserPool.Arn
      Events:
        Signin:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/auth/signin
            Method: post


  ConfirmSignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: auth_handler.confirm_signup
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:ConfirmSignUp
            Resource: !GetAtt AdminUserPool.Arn
      Events:
        ConfirmSignup:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/auth/confirm
            Method: post

  VerifyTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: auth_handler.verify_token
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:GetUser
            Resource: !GetAtt AdminUserPool.Arn
      Events:
        VerifyToken:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/auth/verify
            Method: get

  ConfirmPhoneFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: auth_handler.confirm_phone
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:VerifyUserAttribute
            Resource: !GetAtt AdminUserPool.Arn
      Events:
        ConfirmPhone:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/auth/confirm-phone
            Method: post

  # Bedrock Agent Functions
  ListAgentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: agent_handler.list_agents
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - bedrock:ListAgents
              - bedrock:GetAgent
            Resource: '*'
      Events:
        ListAgents:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/admin/agents
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  CreateAgentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: agent_handler.create_agent
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - bedrock:CreateAgent
              - bedrock:GetAgent
              - iam:PassRole
            Resource: '*'
      Events:
        CreateAgent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/admin/agents
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteAgentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: agent_handler.delete_agent
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - bedrock:DeleteAgent
              - bedrock:GetAgent
            Resource: '*'
      Events:
        DeleteAgent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/admin/agents/{agentId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

  PrepareAgentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: agent_handler.prepare_agent
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - bedrock:PrepareAgent
              - bedrock:GetAgent
            Resource: '*'
      Events:
        PrepareAgent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/admin/agents/{agentId}/prepare
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  GetAgentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: agent_handler.get_agent
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - bedrock:GetAgent
            Resource: '*'
      Events:
        GetAgent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/admin/agents/{agentId}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateAgentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: agent_handler.update_agent
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - bedrock:UpdateAgent
              - bedrock:GetAgent
            Resource: '*'
      Events:
        UpdateAgent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/admin/agents/{agentId}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer

  # SQS Queue for Analysis Jobs
  AnalysisQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: mte-analysis-queue
      VisibilityTimeout: 900
      MessageRetentionPeriod: 1209600

  # Producer Function - Enqueues analysis request
  RequestAnalysisFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: admin_handler.request_analysis
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:UpdateItem
            Resource: !GetAtt SessionsTable.Arn
        - Statement:
            Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt AnalysisQueue.Arn
      Environment:
        Variables:
          ANALYSIS_QUEUE_URL: !Ref AnalysisQueue
      Events:
        RequestAnalysis:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/admin/sessions/{sessionId}/analyze
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  # Consumer Function - Processes analysis from SQS
  ProcessAnalysisFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: admin_handler.process_analysis
      Timeout: 900
      MemorySize: 1024
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MessagesTable
        - Statement:
            Effect: Allow
            Action:
              - bedrock:InvokeModel
            Resource: '*'
      Events:
        ProcessAnalysis:
          Type: SQS
          Properties:
            Queue: !GetAtt AnalysisQueue.Arn
            BatchSize: 1

  # Status Function - Check analysis status
  GetAnalysisStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: admin_handler.get_analysis_status
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
      Events:
        GetAnalysisStatus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/admin/sessions/{sessionId}/analysis-status
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer

  # AWS Documentation Tools Action Group
  AWSDocsActionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: aws_docs_handler.aws_docs_action_handler
      MemorySize: 512
      Timeout: 30
      Events:
        BedrockActionApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /bedrock/aws-docs-action
            Method: post

  # DynamoDB Streams Handler
  SessionStreamHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: packages/backend/
      Handler: stream_handler.handle_session_stream
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
        - Statement:
            Effect: Allow
            Action:
              - ses:SendEmail
              - sns:Publish
            Resource: '*'
        - Statement:
            Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt AnalysisQueue.Arn
      Environment:
        Variables:
          ANALYSIS_QUEUE_URL: !Ref AnalysisQueue
      Events:
        SessionStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt SessionsTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 5

  # S3 Bucket for Static Website (Private)
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "mte-prechat-website-${Stage}-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # CloudFront Origin Access Control
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "mte-prechat-oac-${Stage}"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # # S3 Bucket Policy for CloudFront OAC
  # WebsiteBucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref WebsiteBucket
  #     PolicyDocument:
  #       Statement:
  #         - Sid: AllowCloudFrontServicePrincipal
  #           Effect: Allow
  #           Principal:
  #             Service: cloudfront.amazonaws.com
  #           Action: s3:GetObject
  #           Resource: !Sub "${WebsiteBucket}/*"
  #           Condition:
  #             StringEquals:
  #               AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref OriginAccessControl
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
          Compress: true
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100
        Comment: !Sub "MTE PreChat Website - ${Stage}"



Outputs:
  ApiUrl:
    Description: API Gateway URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
  BedrockActionEndpoint:
    Description: Bedrock Agent Action Group endpoint URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/bedrock/aws-docs-action"
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref AdminUserPool
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref AdminUserPoolClient
  AnalysisQueueUrl:
    Description: SQS Queue URL for analysis jobs
    Value: !Ref AnalysisQueue
  Stage:
    Description: Deployment stage
    Value: !Ref Stage
  WebsiteBucket:
    Description: S3 Bucket for static website
    Value: !Ref WebsiteBucket
  WebsiteURL:
    Description: Website URL
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
  CloudFrontDistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution
